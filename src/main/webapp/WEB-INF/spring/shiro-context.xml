<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- Security Configuration / Apache Shiro ShiroFilter-->
	<import resource="shiro-filter.xml" />

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- override these for application-specific URLs if you like: -->
		<property name="loginUrl" value="/"/>
		<property name="successUrl" value="/index"/> 
		<property name="unauthorizedUrl" value="/unauthorized"/> 
		<!-- The 'filters' property is not necessary since any declared javax.servlet.Filter 
			bean -->
		<!-- defined will be automatically acquired and available via its beanName 
			in chain -->
		<!-- definitions, but you can perform instance overrides or name aliases 
			here if you like: -->
		<!-- <property name="filters"> <util:map> <entry key="anAlias" value-ref="someFilter"/> 
			</util:map> </property> -->
		<property name="filterChainDefinitions" ref="shiroFilterString"></property>
	</bean>
	
	<!-- Define any javax.servlet.Filter beans you want anywhere in this application 
		context. -->
	<!-- They will automatically be acquired by the 'shiroFilter' bean above 
		and made available -->
	<!-- to the 'filterChainDefinitions' property. Or you can manually/explicitly 
		add them -->
	<!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for 
		more details. -->
	<!--  
		<bean id="someFilter" class="..." />
		<bean id="anotherFilter" class="..."></bean>
	 -->

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app. If you have multiple realms, use the 'realms' property instead. -->
		<property name="realm" ref="jMongodbRealm" />
		
		<!-- By default the servlet container sessions will be used. Uncomment 
			this line to use shiro's native sessions (see the JavaDoc for more): -->
		<property name="sessionMode" value="native"/>
		
		<!-- Enable the ehCache -->
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>
	
	<!-- Shiro ehcache -->
	<bean id="ehCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"/>
	
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	<!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
	<!-- the lifecycleBeanProcessor has run: -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	    <property name="securityManager" ref="securityManager"/>
	</bean>

	<bean id="sha512Matcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<!-- Modifying any piece of the matcher will likely invalidate the ability to match any passphrases in the DB -->
		<property name="hashAlgorithmName" value="${shiro.hashAlgorithmName}" />
		<property name="storedCredentialsHexEncoded" value="${shiro.storedCredentialsHexEncoded}" />
		<property name="hashIterations" value="${shiro.hashIterations}" />
	</bean>
	
	<!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
	<!-- security datasource: -->
	<bean id="jMongodbRealm" class="com.charmyin.shiro.realm.jdbc.JMongodbRealm">
		<property name="mongoOperations" ref="mongoTemplate"/>
		<property name="shiroSalt" value="${shiro.applicationSalt}"/>
		<property name="saltStyle" value="COLUMN"/>
		<property name="credentialsMatcher" ref="sha512Matcher"/>
	</bean>
	
	<bean id="jdbcRealm" class="com.charmyin.shiro.realm.jdbc.CustomJdbcRealm">
		<property name="dataSource" ref="dataSource"/>
		<property name="authenticationQuery" value="select passphrase, CONCAT('${shiro.applicationSalt}', ':', salt) as salt from shiro_user where login_id = ?"/>
		<property name="userRolesQuery" value="SELECT shiro_role.id, permission FROM shiro_role LEFT JOIN shiro_user_role ON shiro_role.id = shiro_user_role.role_id LEFT JOIN shiro_user ON shiro_user_role.user_id = shiro_user.id WHERE login_id = ?"/>
		<property name="permissionsQuery" value="SELECT permission, menu FROM shiro_role where name=?"/>
		<property name="permissionsQueryByMenuId" value="select full_permission from basic_menu where id=?"/>
		<property name="permissionsLookupEnabled" value="true"/>
		<property name="saltStyle" value="COLUMN"/>
		<property name="credentialsMatcher" ref="sha512Matcher"/>
	</bean>
</beans>